{"version":3,"sources":["webpack:///src/app/pages/question/question-form/question-form.page.html","webpack:///src/app/pages/question/question-form/question-form-routing.module.ts","webpack:///src/app/pages/question/question-form/question-form.module.ts","webpack:///src/app/pages/question/question-form/question-form.page.scss","webpack:///src/app/pages/question/question-form/question-form.page.ts"],"names":["routes","path","component","QuestionFormPageRoutingModule","imports","forChild","exports","QuestionFormPageModule","declarations","QuestionFormPage","activatedRoute","questionService","router","alertController","nlService","question","user","today","Date","toISOString","characters","questionId","snapshot","params","id","getStorageUser","getQuestion","show","questionList","Array","labels","head","subHead","btnTex","navigate","create","header","subHeader","buttons","text","handler","alert","present","_id","date","open","createQuestion","subscribe","res","status","data","queryParams","map","l","ref","navigateAlert","err","message","updateQuestion","getQuestionById","key","size","title","length","find","c","getClassify","console","log","getQuestions","tag","push","cssClass","role","selector","template"],"mappings":"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","file":"pages-question-question-form-question-form-module-es5.js","sourcesContent":["export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-title>Nueva pregunta\\r\\n    </ion-title>\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button menu=\\\"main-menu\\\"></ion-menu-button>\\r\\n    </ion-buttons>\\r\\n    <ion-buttons slot=\\\"end\\\">\\r\\n      <ion-back-button defaultHref=\\\"events\\\"></ion-back-button>\\r\\n    </ion-buttons>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <form #formQuestion=\\\"ngForm\\\">\\r\\n    <ion-list>\\r\\n\\r\\n      <ion-item>\\r\\n        <ion-label>Fecha:</ion-label>\\r\\n        <ion-datetime [value]=\\\"today\\\" displayFormat=\\\"MMMM DD, YYYY\\\" display-timezone=\\\"utc\\\" readonly></ion-datetime>\\r\\n      </ion-item>\\r\\n\\r\\n      <ion-item>\\r\\n        <ion-label position=\\\"floating\\\" color=\\\"medium\\\">Tu pregunta:</ion-label>\\r\\n        <ion-input type=\\\"text\\\" name=\\\"title\\\" [(ngModel)]=\\\"question.title\\\" minlength=\\\"10\\\" required\\r\\n          (keyup)=\\\"getClassifications($event.key)\\\"></ion-input>\\r\\n      </ion-item>\\r\\n\\r\\n      <ion-item>\\r\\n        <ion-label position=\\\"floating\\\" color=\\\"medium\\\">Agrega mas detalles sobre la pregunta:</ion-label>\\r\\n        <ion-textarea name=\\\"body\\\" [(ngModel)]=\\\"question.body\\\" minlength=\\\"8\\\" required (ionFocus)=\\\"getClassifications('?')\\\"></ion-textarea>\\r\\n      </ion-item>\\r\\n\\r\\n    </ion-list>\\r\\n  </form>\\r\\n\\r\\n  <section>\\r\\n    <ion-button *ngIf=\\\"this.questionId == '0'; else elseBtn\\\" expand=\\\"full\\\" color=\\\"myPrimary\\\" (click)=\\\"createQuestion()\\\"\\r\\n      [disabled]=\\\"!formQuestion.valid\\\">\\r\\n      PREGUNTAR\\r\\n    </ion-button>\\r\\n\\r\\n    <ng-template #elseBtn>\\r\\n      <ion-button expand=\\\"full\\\" color=\\\"myPrimary\\\" (click)=\\\"updateQuestion()\\\" [disabled]=\\\"!formQuestion.valid\\\">\\r\\n        ACTUALIZAR\\r\\n      </ion-button>\\r\\n    </ng-template>\\r\\n  </section>\\r\\n\\r\\n  <div *ngIf=\\\"show\\\">\\r\\n    <ion-list>\\r\\n      <ion-text class=\\\"ion-margin-start\\\">Tu pregunta es de tipo:</ion-text>\\r\\n      <ion-item *ngFor=\\\"let label of labels\\\">\\r\\n        <ion-button expand=\\\"full\\\" color=\\\"myPrimary\\\" (click)=\\\"getQuestions(label.ref)\\\">{{ label.name }}</ion-button>\\r\\n        <ion-text color=\\\"medium\\\" slot=\\\"end\\\">Mostrar sugerencias.</ion-text>\\r\\n      </ion-item>\\r\\n    </ion-list>\\r\\n\\r\\n    <ion-list>\\r\\n\\r\\n      <ion-item *ngFor=\\\"let qtn of questionList\\\" (click)=\\\"viewQuestion(qtn._id)\\\">\\r\\n        <ion-text slot=\\\"end\\\" color=\\\"myPrimaryDark\\\"> {{qtn.date | date: 'd/M/yyyy'}} </ion-text>\\r\\n        <ion-label>\\r\\n          <h2><strong> {{ qtn.title }} </strong></h2>\\r\\n          <ion-text color=\\\"myPrimaryTextColor\\\">\\r\\n            <span> {{ qtn.body }} </span>\\r\\n          </ion-text>\\r\\n        </ion-label>\\r\\n      </ion-item>\\r\\n\\r\\n    </ion-list>\\r\\n\\r\\n  </div>\\r\\n\\r\\n\\r\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { QuestionFormPage } from './question-form.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: QuestionFormPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class QuestionFormPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { QuestionFormPageRoutingModule } from './question-form-routing.module';\n\nimport { QuestionFormPage } from './question-form.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    QuestionFormPageRoutingModule\n  ],\n  declarations: [QuestionFormPage]\n})\nexport class QuestionFormPageModule {}\n","export default \"ion-content {\\n  --background: white;\\n}\\n\\nion-title {\\n  --color: white;\\n  font-family: Arial, Helvetica, sans-serif;\\n}\\n\\nion-toolbar {\\n  --background: #00796B;\\n  --color: white;\\n}\\n\\nion-button {\\n  --color: white;\\n  font-family: Arial, Helvetica, sans-serif;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvcXVlc3Rpb24vcXVlc3Rpb24tZm9ybS9xdWVzdGlvbi1mb3JtLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLG1CQUFBO0FBQ0o7O0FBRUE7RUFDSSxjQUFBO0VBQ0EseUNBQUE7QUFDSjs7QUFFQTtFQUNJLHFCQUFBO0VBQ0EsY0FBQTtBQUNKOztBQUVBO0VBQ0ksY0FBQTtFQUNBLHlDQUFBO0FBQ0oiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9xdWVzdGlvbi9xdWVzdGlvbi1mb3JtL3F1ZXN0aW9uLWZvcm0ucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWNvbnRlbnQge1xyXG4gICAgLS1iYWNrZ3JvdW5kOiB3aGl0ZTtcclxufVxyXG5cclxuaW9uLXRpdGxlIHtcclxuICAgIC0tY29sb3I6IHdoaXRlO1xyXG4gICAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XHJcbn1cclxuXHJcbmlvbi10b29sYmFyIHtcclxuICAgIC0tYmFja2dyb3VuZDogIzAwNzk2QjtcclxuICAgIC0tY29sb3I6IHdoaXRlO1xyXG59XHJcblxyXG5pb24tYnV0dG9uIHtcclxuICAgIC0tY29sb3I6IHdoaXRlO1xyXG4gICAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWZcclxufVxyXG4iXX0= */\";","import { Component, OnInit } from '@angular/core';\nimport { Question } from 'src/app/models/question';\nimport { ActivatedRoute, Router, NavigationEnd } from '@angular/router';\nimport { QuestionService } from 'src/app/services/question.service';\nimport { AlertController, ToastController } from '@ionic/angular';\nimport { NlService } from 'src/app/services/nl.service';\nimport { Label } from 'src/app/models/label';\nimport { User } from 'src/app/models/user';\nimport { Util } from 'src/app/models/util';\n\n@Component({\n  selector: 'app-question-form',\n  templateUrl: './question-form.page.html',\n  styleUrls: ['./question-form.page.scss'],\n})\nexport class QuestionFormPage implements OnInit {\n\n  question: Question = new Question();\n  questionId: string;\n  user = new User();\n\n  today = new Date().toISOString();\n  show: boolean;\n  labels: Label[];\n  characters: string[];\n  questionList: Question[];\n\n  constructor(private activatedRoute: ActivatedRoute, private questionService: QuestionService,\n    private router: Router, private alertController: AlertController,\n    private nlService: NlService) { }\n\n  ngOnInit() {\n    this.characters = [' ', '.', '?'];\n  }\n\n  ionViewWillEnter() {\n    this.question = new Question();\n    this.questionId = this.activatedRoute.snapshot.params.id;\n    this.user = Util.getStorageUser();\n    this.getQuestion(this.questionId);\n    this.show = false;\n    this.questionList = Array<Question>();\n    this.labels = new Array<Label>();\n\n  }\n\n  async navigateAlert(head: string, subHead: string, btnTex: string, navigate: string) {\n    const alert = await this.alertController.create({\n      header: head,\n      subHeader: subHead,\n      buttons: [{\n        text: btnTex,\n        handler: () => {\n          this.router.navigate(['/' + navigate + '/']);\n        }\n      }]\n    });\n\n    await alert.present();\n  }\n\n  createQuestion() {\n    this.question.user._id = this.user._id;\n    this.question.date = new Date();\n    this.question.open = true;\n\n    this.questionService.createQuestion(this.question).subscribe((res) => {\n      if (res.status) {\n        this.router.navigate(['/tag-form/' + res.data._id], { queryParams: { labels: this.labels.map(l => l.ref) } });\n      } else {\n        this.navigateAlert('¡ERROR AL CREAR!', 'Hubo un problema al intentar crear esta pregunta', 'OK', 'my-questions');\n      }\n    }, (err) => {\n      this.navigateAlert('ERROR DE SERVIDOR', err.message, 'OK', 'my-questions');\n    });\n  }\n\n  updateQuestion() {\n    this.questionService.updateQuestion(this.question).subscribe((res) => {\n      if (res.status) {\n        this.navigateAlert('¡PREGUNTA ACTUALIZADA!', 'Actualizaste esta pregunta', 'OK', 'my-questions');\n      } else {\n        this.navigateAlert('¡ERROR AL ACTULIZAR!', 'Hubo un problema al intentar actualizar estra pregunta', 'OK', 'my-questions');\n      }\n    }, (err) => {\n      this.navigateAlert('ERROR DE SERVIDOR', err.message, 'OK', 'events');\n    });\n  }\n\n  getQuestion(id: string) {\n    if (id !== '0') {\n      this.questionService.getQuestionById(id).subscribe((res) => {\n        if (res.status) {\n          this.question = res.data;\n        } else {\n          this.navigateAlert('¡ERROR AL OBTENER!', 'Hubo un problema al intentar obtener la informacion de esta pregunta', 'OK', 'my-questions');\n        }\n      }, (err) => {\n        this.navigateAlert('ERROR DE SERVIDOR', err.message, 'OK', 'my-questions');\n      });\n    } else {\n      this.question = new Question();\n    }\n  }\n\n  getClassifications(key: string) {\n    const size = (this.question.title) ? this.question.title.length : 0;\n    if (size < 10) {\n      this.labels = [];\n      this.show = false;\n      this.questionList = new Array<Question>();\n    } else {\n      if (this.characters.find(c => key === c)) {\n        this.nlService.getClassify(this.question).subscribe((res) => {\n          if (res.data.length) {\n\n            this.labels = res.data;\n            this.show = true;\n          }\n        }, (err) => {\n          console.log(err);\n        });\n      }\n    }\n  }\n\n  getQuestions(ref: string) {\n    this.nlService.getQuestions(ref).subscribe((res) => {\n      if (res.status) {\n        this.questionList = new Array<Question>();\n\n        for (let tag of res.data) {\n          this.questionList.push(tag.question);\n        }\n      }\n    }, (err) => {\n      console.log(err);\n    });\n  }\n\n  async viewQuestion(id: string) {\n    const alert = await this.alertController.create({\n      cssClass: 'my-custom-class',\n      header: '¿Salir de la edición?',\n      message: 'Si continuas se perdera el progreso de tu pregunta.',\n      buttons: [\n        {\n          text: 'Cancelar',\n          role: 'cancel',\n          cssClass: 'secondary',\n        }, {\n          text: 'Continuar',\n          cssClass: 'success',\n          handler: () => {\n            this.router.navigate(['/question-view/' + id]);\n          }\n        }\n      ]\n    });\n\n    await alert.present();\n  }\n\n\n\n}\n"]}